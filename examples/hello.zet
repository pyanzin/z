extern def concat(s1: String, s2: String): String
extern def print(s: String): None
extern def getchar(): Char
extern def len(s: String): Int
//extern def fork(fn: () => None): None
//extern def pause(n: Int): None
extern def compare(s1: String, s2: String): Int
extern def int2string(i: Int): String
extern def char2string(ch: Char): String
extern def Array[T](size: Int): Array[T]
extern def size(xs: Array[_]): Int

def main(): None = {
   var arr = Array[String](4);
   arr(0) = "a mulatto";
   arr(1) = "an albino";
   arr(2) = "a mosquito";
   arr(3) = "my libido";
   
   arr = filter[String](arr, (x: String): Boolean => len(x) == 9);

   foreach[String](arr, (x: String): None => print(x + "\n"));

   var cnt = count[String](arr, (x: String): Boolean => len(x) == 9);
   print(int2string(cnt));

   getchar();
}

def printLine(s: String): None = {
   print(s);
   print("\n");
}

def reverse(x: String): String = {
   var result = "";
   for (var i = len(x) - 1; i >= 0; i = i - 1)
      result = result + char2string(x(i));

   return result;
}

def join(xs: Array[String], delim: String): String = {
   var result = "";
   for (var i = 0; i < size(xs); i = i + 1) {
      result = result + xs(i);
      if (i != (size(xs) - 1))
         result = result + delim;      
   }

   return result;
}

def foreach[T](xs: Array[T], f: T => None): None = {
   for (var i = 0; i < size(xs); i = i + 1)
      f(xs(i));
}

def reduce[T, R](xs: Array[T], z: R, f: (R, T) => R): R = {
   var result = z;
   for (var i = 0; i < size(xs); i = i + 1)
      result = f(result, xs(i));   

   return result;
}

def count[T](xs: Array[T], f: T => Boolean): Int = {
   var result = 0;

   for (var i = 0; i < size(xs); i = i + 1)
      if (f(xs(i)))
         result = result + 1;   

   print(int2string(result));

   return result;
}

def any[T](xs: Array[T], f: T => Boolean): Boolean = {
   for (var i = 0; i < size(xs); i = i + 1) {
      if (f(xs(i)))
         return true;
   }
   return false;
}

def filter[T](xs: Array[T], f: T => Boolean): Array[T] = {
   var result = Array[T](count[T](xs, f));

   var i = 0;
   var j = 0;
   while (i < size(xs)) {
      if (f(xs(i))) {
         result(i) = xs(j);
         j = j + 1;
      }
      i = i + 1;
   }

   return result;
}

def map[A, B](xs: Array[A], f: A => B): Array[B] = {
   var result = Array[B](size(xs));
   var i = 0;
   while (i < size(xs)) {
      result(i) = f(xs(i));
      i = i + 1;
   }

   return result;
}
